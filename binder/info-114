#!/bin/sh

if [ -n "$JUPYTERHUB_USER" ]; then
    USER=`basename -s -at-u-psud.fr $JUPYTERHUB_USER`
fi
SIF=tp-ssh1.dep-informatique.u-psud.fr
COURSE=Info114
SCRIPT=info-114
ROOT=/public/info-114
EXCHANGE=~$ROOT/exchange
GIT=https://gitlab.u-psud.fr/$COURSE
GIT_SUJETS=$GIT/sujets

export LANG=fr_FR.UTF-8

help () {
    cat <<EOF

Aide pour l'utilisation de la commande $SCRIPT
===============================================

Télécharger le sujet pour un TP ou un projet (ici pour Semaine1):

       cd ~/$COURSE
       $SCRIPT fetch Semaine1

Synchroniser son travail avec les salles de TP du SIF (ici pour Semaine1)

     $SCRIPT sync Semaine1

Soumettre son TP ou projet (ici pour la semaine 1):

       cd ~/$COURSE
       $SCRIPT submit Semaine1

Lancer le notebook Jupyter:

       $SCRIPT jupyter notebook
EOF
}

advanced_help() {
    cat <<EOF

Aide pour l'utilisation de la commande $SCRIPT
===============================================

Lancer une commande arbitraire dans l'environnement conda:

     $SCRIPT run commande arg1 arg2

Monter le répertoire $COURSE depuis les machines du SIF par sshfs:

     $SCRIPT mount

Collecter les soumissions des étudiants; à lancer par Nicolas sur les machines du SIF:

     $SCRIPT collect Semaine3
EOF
}


check_dir () {
    if [ `pwd` != "$HOME/$COURSE" ]; then
        echo Vous devez être dans le sous-répertoire $COURSE de votre répertoire pour lancer cette commande
        exit 1
    fi
}

run () {
    #tput setaf 2
    echo -n "$SCRIPT: exécution de:"
    #tput rmul
    echo -n " "
    tput setaf 2
    echo "$@"
    tput sgr0
    if [ -z $DRY_RUN ]; then
        "$@" || exit 1
    fi
}

fetch () {
    ASSIGNMENT=$1
    # Can't yet use `run` on pipe command
    curl -s $GIT_SUJETS/-/archive/master/sujets-master.tar.gz -o - | tar --strip-components=1 --backup=simple -zvxf  - sujets-master/$ASSIGNMENT
}

submit() {
    ASSIGNMENT=$1
    if [ -n "$JUPYTERHUB_USER" ]; then # Sur le serveur JupyterHub
        sync_unison $ASSIGNMENT
        echo $SCRIPT: soumission du dossier $COURSE/$ASSIGNMENT
        run ssh $USER@$SIF "cd $COURSE && $SCRIPT submit $ASSIGNMENT"
    else
        run nbgrader submit --Exchange.root=$EXCHANGE --course=$COURSE $ASSIGNMENT
    fi
}

collect() {
    ASSIGNMENT=$1
    # Won't be needed once nbgrader PR #1222 is merged
    cd $ROOT/exchange/$COURSE/
    run nbgrader collect $ASSIGNMENT
    run git pull
    run git add submitted
    run git -m "Collect $ASSIGNMENT" submitted
    run git push
}

mount() {
    cd $HOME
    run mkdir -p $COURSE
    run sshfs $USER@$SIF:$COURSE $COURSE
}

sync_unison() {
    ASSIGNMENT=$1
    echo $SCRIPT: synchronisation du dossier $COURSE/$ASSIGNMENT avec les salles de TP du SIF
    cd $HOME
    run unison -auto -backups $COURSE/$ASSIGNMENT ssh://$USER@$SIF/$COURSE/$ASSIGNMENT
}

rsync_from_sif() {
    cd $HOME
    run rsync --update -avz  $USER@$SIF:$COURSE/ $COURSE/
}
rsync_to_sif() {
    cd $HOME
    run rsync --update -avz  $COURSE/ $USER@$SIF:$COURSE/
}

clean_root_files() {
    cd $HOME
    echo "Nettoyage des fichiers indus"
    for x in *; do test -O $x  || mv $x .$x; done
}

command=$1

if [ "$command" = "-n" ]; then
    DRY_RUN="true"
    shift
    command=$1
fi

if [ -z $command ]; then
    help;
    exit 0
fi

shift || help

case $command in
    help)
        help
        exit 0;;
    advanced_help)
        advanced_help
        exit 0;;
    g++)
        command="g++ -g -Wall -pedantic -Wno-sign-compare -Wno-unused-value -std=c++11 ";;
    jupyter)
        if [ "$1" = "notebook" ]; then
            shift
            command="jupyter notebook --ip=127.0.0.1"
        fi;;
    get)
        check_dir
        fetch "$@"
        exit 0;;
    fetch)
        check_dir
        fetch "$@"
        exit 0;;
    submit)
        check_dir
        submit "$@"
        exit 0;;
    collect)
        # check_dir /public/info-111
        collect "$@"
        exit 0;;
    run) # run an arbitrary command in the conda environment; for testing and teacher's use
        command="$1"
        shift;;
    mount)
        mount
        exit 0;;
    sync)
        sync_unison
        exit 0;;
    env)
        cd $ROOT/binder
        git pull
        run conda env $1
        run ./postBuild
        exit 0;;
    clean_root_files)
        clean_root_files
        exit 0;;
    *)
        echo commande $SCRIPT $command inconnue
        help
        exit 1
        ;;
esac

run $command "$@"
